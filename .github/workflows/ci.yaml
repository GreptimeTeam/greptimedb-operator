# Copyright 2022 Greptime Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on: [push, pull_request]

env:
  GO_VERSION: "1.21"

jobs:
  build:
    name: Build the project
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check code generation
        run: |
          make check-code-generation

      - name: Compile the project
        run: |
          make

      - name: Make lint
        run: |
          make lint

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run the unit tests
        run: |
          make test

  e2e:
    name: Run e2e
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run e2e
        id: e2e
        run: |
          make e2e

      - name: Print debug message if e2e failed
        if: ${{ failure() && steps.e2e.conclusion == 'failure' }}
        run: |
          # printf the host info.
          uname -a
          kind version
          kubectl version
          go version
          
          # get K8s resource info.
          kubectl get all -A
          kubectl get pvc
          
          # describe pods.
          echo "==> describe metasrv"
          kubectl describe pod `kubectl get pod | grep meta | awk '{print $1}'`
          echo "<== describe metasrv"
          
          echo "==> describe frontend"
          kubectl describe pod `kubectl get pod | grep frontend | awk '{print $1}'`
          echo "<== describe frontend"
          
          echo "==> describe datanode-0"
          kubectl describe pod e2e-cluster-datanode-0
          echo "<== describe datanode-0"
          
          echo "==> describe datanode-1"
          kubectl describe pod e2e-cluster-datanode-1
          echo "<== describe datanode-1"
          
          echo "==> describe datanode-2"
          kubectl describe pod e2e-cluster-datanode-2
          echo "<== describe datanode-2"
          
          # dump logs
          echo "==> metasrv logging"
          kubectl logs `kubectl get pod | grep meta | awk '{print $1}'`
          echo "<== metasrv logging"
          
          echo "==> frontend logging"
          kubectl logs `kubectl get pod | grep frontend | awk '{print $1}'`
          echo "<== frontend logging"
          
          echo "==> e2e-cluster-datanode-0 logging"
          kubectl logs e2e-cluster-datanode-0
          echo "<== e2e-cluster-datanode-0 logging"
          
          echo "==> e2e-cluster-datanode-1 logging"
          kubectl logs e2e-cluster-datanode-1
          echo "<== e2e-cluster-datanode-1 logging"
          
          echo "==> e2e-cluster-datanode-2 logging"
          kubectl logs e2e-cluster-datanode-2
          echo "<== e2e-cluster-datanode-2 logging"
