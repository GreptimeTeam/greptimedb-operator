// Copyright 2022 Greptime Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	apisv1alpha1 "github.com/GreptimeTeam/greptimedb-operator/apis/v1alpha1"
	scheme "github.com/GreptimeTeam/greptimedb-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// GreptimeDBStandalonesGetter has a method to return a GreptimeDBStandaloneInterface.
// A group's client should implement this interface.
type GreptimeDBStandalonesGetter interface {
	GreptimeDBStandalones(namespace string) GreptimeDBStandaloneInterface
}

// GreptimeDBStandaloneInterface has methods to work with GreptimeDBStandalone resources.
type GreptimeDBStandaloneInterface interface {
	Create(ctx context.Context, greptimeDBStandalone *apisv1alpha1.GreptimeDBStandalone, opts v1.CreateOptions) (*apisv1alpha1.GreptimeDBStandalone, error)
	Update(ctx context.Context, greptimeDBStandalone *apisv1alpha1.GreptimeDBStandalone, opts v1.UpdateOptions) (*apisv1alpha1.GreptimeDBStandalone, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, greptimeDBStandalone *apisv1alpha1.GreptimeDBStandalone, opts v1.UpdateOptions) (*apisv1alpha1.GreptimeDBStandalone, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apisv1alpha1.GreptimeDBStandalone, error)
	List(ctx context.Context, opts v1.ListOptions) (*apisv1alpha1.GreptimeDBStandaloneList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apisv1alpha1.GreptimeDBStandalone, err error)
	GreptimeDBStandaloneExpansion
}

// greptimeDBStandalones implements GreptimeDBStandaloneInterface
type greptimeDBStandalones struct {
	*gentype.ClientWithList[*apisv1alpha1.GreptimeDBStandalone, *apisv1alpha1.GreptimeDBStandaloneList]
}

// newGreptimeDBStandalones returns a GreptimeDBStandalones
func newGreptimeDBStandalones(c *ApisV1alpha1Client, namespace string) *greptimeDBStandalones {
	return &greptimeDBStandalones{
		gentype.NewClientWithList[*apisv1alpha1.GreptimeDBStandalone, *apisv1alpha1.GreptimeDBStandaloneList](
			"greptimedbstandalones",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apisv1alpha1.GreptimeDBStandalone { return &apisv1alpha1.GreptimeDBStandalone{} },
			func() *apisv1alpha1.GreptimeDBStandaloneList { return &apisv1alpha1.GreptimeDBStandaloneList{} },
		),
	}
}
